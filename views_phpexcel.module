<?php
/**
 * @file: Allows to export views data to excel file
*/

/**
 * Invoke hook_views_api().
 */
function views_phpexcel_views_api() {
   return array(
    'api' => 3,
  );

}

/**
 * Invoke hook_menu().
 */
function views_phpexcel_menu() {
  $items['views/phpexcel/%/%/export'] = array (
    'title' => t('Export to Excel'),
    'description' => t('Exports view data to excel file'),
    'page callback' => 'views_phpexcel_export_view',
    'page arguments' => array(2,3),
    'access callback' => 'views_phpexcel_export_view_access',
    'access arguments' => array(2, 3),
  );
  return $items;
}

/**
 * Function views_phpexcel_export_view_access().
 */
function views_phpexcel_export_view_access($view_name, $display_name) {
  $view = views_get_view($view_name);
  if (!$view) return FALSE;
  $view->set_display($display_name);
  dpm($view);
  return TRUE;
}

/**
 * Function views_phpexcel_export_view().
 */
function views_phpexcel_export_view($view_name, $display_name) {
  // $filter_name = 'changed';
  $view = views_get_view($view_name);
  if (!$view) return drupal_not_found();
  $view->set_display($display_name);
  // $filter = $view->get_item($view->current_display, 'filter', $filter_name);
  // $filter['value']['value'] = date('r', $delta);
  //$view->set_item($view->current_display, 'filter', $filter_name, $filter);
  $view->execute();
  // $response = $view->result;
  $form = drupal_get_form('views_phpexcel_form_export', $view->handler);
  return drupal_render($form);
}

/**
 * Function views_phpexcel_form_export().
 */
function views_phpexcel_form_export($form, $from_state, $handler) {

  foreach ($handler->view->field as $k=>$f) {
    // dpm($k);
  }
  $fields = $handler->options['views_phpexcel_fields'];
  // dpm($handler->view);

  $form['fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fields'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  foreach ($fields as $fk => $opt) {
    if (!$opt['export']) continue;
    $fld = $handler->view->field[$fk];
    $form['fields'][$fk] = array(
      '#type' => 'checkbox',
      '#title' => $fld->options['label'] ? $fld->options['label'] : $fld->definition['title'],
      '#default_value' => TRUE,
    );
  }

  $options = array('xls' => 'XLS', 'xlsx' => 'XLSX');
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('File type'),
    '#options' => $options,
    '#default_value' => 'xlsx',
    '#description' => '', //t(''),
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Export'),
  );

  /*
  foreach ($handler->view->field as $k => $f) {
    dpm($k);
    dpm($f);
  }*/
  return $form;
}

/**
 * Function views_phpexcel_form_export_submit().
 */
function views_phpexcel_form_export_submit($form, $state) {
  $handler = $state['build_info']['args'][0];
  $v = $state['values'];

  $letters = str_split('ABCDEFGHIJKLMNOPQRSTUVWXYZ');
  $fields = array();
  foreach (array_keys(array_filter($v['fields'])) as $index=>$fld) {
    $fields[$fld] = $letters[$index];
  };

  $params = array(
    'query' => drupal_get_query_parameters(),
    'view' => $handler->view->name,
    'display' => $handler->view->current_display,
    'arguments' => $handler->view->args,
    'fields' => $fields,
    'options' => $handler->options,
    'type' => $v['type'],
    'path_parts' => explode('/', current_path()),
  );

  $operations[] = array('views_phpexcel_batch_initialize',
    array($params, t('Initiate...'))
  );

  $pages_count = $handler->view->query->pager->get_pager_total();

  for ($i = 0; $i < $pages_count; $i++) {
    $operations[] = array('views_phpexcel_batch_operation', array($i, t('Append to excel page @nr...',
      array('@nr' => $i + 1))));
  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'views_phpexcel_batch_finished',
    //'title' => t('Export @this', array($this->
  );

  batch_set($batch);
}

/**
 * Function views_phpexcel_batch_initialize().
 */
function views_phpexcel_batch_initialize($params, $details, &$context) {
  $context['results']['params'] = $params;
  $params = (object) $params;
  $context['results']['cells'] = array();
  $firstRow = isset($params->options['start_at_row']) ? intval($params->options['start_at_row']) : 1;
  $context['results']['current_row'] = ($firstRow < 1) ? 1 : $firstRow;

  $params = (object) $context['results']['params'];

  $cells = &$context['results']['cells'];
  $nr = $context['results']['current_row'];

  $view = views_get_view($params->view);
  $view->set_display($params->display);
  $view->args = $params->arguments;
  $view->execute();
  foreach($params->fields as $field_name => $letter) {
    $fld = $view->field[$field_name];
    $cells[$letter . $nr] = $fld->options['label'] ? $fld->options['label'] : $fld->definition['title'];
  }

}

/**
 * Function views_phpexcel_batch_operation().
 */
function views_phpexcel_batch_operation($pagenr, $details, &$context) {
  $params = (object) $context['results']['params'];

  $cells = &$context['results']['cells'];
  $nr = &$context['results']['current_row'];

  $firstRow = isset($params->options['start_at_row']) ? intval($params->options['start_at_row']) : 1;

  $view = views_get_view($params->view);
  $view->set_display($params->display);
  $view->args = $params->arguments;
  $view->set_current_page($pagenr);

  foreach ($params->query as $filter_name=>$v) {
    $filter = $view->get_item($view->current_display, 'filter', $filter_name);
    if ($filter) $filter['value']['value'] = $v;
  }

  $styles = array();
  // $view->set_item($view->current_display, 'filter', $filter_name, $filter);
  $view->execute();

  $tokens = $replOne = array();
  foreach ($params->fields as $fk => $ltr) {
    $tokens[$fk] = "[$fk]";
    $replOne[$fk] = $ltr . '<RowNr>';
  }

  foreach ($view->result as $r) {
    $nr++;
    foreach($params->fields as $field_name => $letter) {
      $def = $view->field[$field_name];

      // fiels options
      $fo = $params->options['views_phpexcel_fields'][$field_name];
      $formula = trim($fo['formula']);

      if ($formula) {
        $value = str_replace($tokens, $replOne, $formula);
        $value = str_replace('<RowNr>', $nr, $value);
      } else {
        switch($def->field) {
          case 'title':
          case 'id':
            $value = $r->{$def->field_alias};
            break;
          case 'counter':
            $value = $nr - $firstRow;
            break;
          default:
            switch ($def->field_info['type']) {
              case 'image':
                $img = $r->{'field_' . $field_name}[0];
                $style = $img['rendered']['#image_style'];
                if (!isset($styles[$style])) {
                  $styles[$style] = image_style_load($style);
                  foreach ($styles[$style]['effects'] as $e) {
                    if ($e['name'] == 'image_scale') {
                      $styles[$style] = array(
                        'height' => $e['data']['height'],
                        'width' => $e['data']['width'],
                      );
                    }
                  }
                }
                $style = $styles[$style];

                $path = image_style_path($img['rendered']['#image_style'], $img['raw']['uri']);
                if (file_exists($path)) {
                  $value = array(
                    'type' => 'image',
                    'path' => $path,
                    'height' => ceil((isset($style['height']) ? $style['height'] : 100) / 1.3),
                    'width' => ceil((isset($style['width']) ? $style['width'] : 100) / 9) ,
                  );
                }
                else $value = $path;
                break;
              default:
                if (isset($r->{'field_' . $field_name})) {
                  $values = array();
                  foreach ($r->{'field_' . $field_name} as $fv) {
                    $values[] = $fv['raw']['value'];
                  }
                  $value = implode(', ', $values);
                  //$r->{'field_' . $field_name}[0]['raw']['value'];
                } else {
                  $value = 'Unknown';
                }
                break;
            }
            break;
        }
      }
      $cells[$letter . $nr] = $value;
    }
  }
}

/**
 * Function views_phpexcel_batch_finished().
 */
function views_phpexcel_batch_finished($success, $results, $operations) {
  if ($success) {
    $file_path = views_phpexcel_build_result_file($results);
    // drupal_set_message(t('File is ready to be downloaded from <a href="@link">here</a>.', array('@link'=>$file_path)));
    drupal_goto($file_path);
    return TRUE;
  }
  else {
    drupal_set_message(t('Failed to build the export file'), 'error');
    return FALSE;
  }
}

/**
 * Function views_phpexcel_build_result_file().
 */
function views_phpexcel_build_result_file($results) {

  require_once 'sites/all/libraries/PHPExcel/Classes/PHPExcel.php';
  require_once 'sites/all/libraries/PHPExcel/Classes/PHPExcel/IOFactory.php';

  // require_once 'PEAR5.php';
  // require_once 'Numbers/Words.php';

  $params = (object) $results['params'];

  $view = views_get_view($params->view);
  $view->set_display($params->display);

  // Create new PHPExcel object
  $objPHPExcel = new PHPExcel();

  $site_name=variable_get('site_name', 'Noname');

  // Set properties
  $objPHPExcel->getProperties()
    ->setCreator($site_name)
    ->setLastModifiedBy($site_name)
    ->setTitle($view->human_name)
    ->setSubject($view->human_name)
    ->setDescription(
      "Downloaded from the site ".$site_name.
      " at ".$_SERVER['HTTP_HOST'].". Downloaded at ".date("Y-m-d h:i:s")
      );

  $objPHPExcel->setActiveSheetIndex(0);
  $objSheet=$objPHPExcel->getActiveSheet();

  $objSheet->setTitle($view->human_name);

  $onImageHeight = $params->options['on_image_set_height'];

  foreach ($results['cells'] as $addr=>$value) {
    $rowNr = preg_replace("/^[A-Z]+/", '', $addr);
    $colLtr = preg_replace("/[0-9]+$/", '', $addr);
    if ($colLtr == current($params->fields)) {
      // Set row height to auto by default.
      $objSheet->getRowDimension($rowNr)->setRowHeight(-1);
    }
    if (is_array($value)) {
      switch($value['type']) {
        case 'image':
          $_DRAW = new PHPExcel_Worksheet_Drawing();
          $_DRAW->setPath($value['path']);
          $_DRAW->setWorksheet($objSheet);
          $_DRAW->setCoordinates($addr);
          $objSheet->getRowDimension($rowNr)->setRowHeight($onImageHeight);
          // $objSheet->getColumnDimension($colLtr)->setWidth($value['width']);
          break;
        default:
          if (isset($value['value'])) {
            $objSheet->SetCellValue($addr, $value['value']);
          }
          break;
      }

      if (isset($value['format'])) {
        $objSheet->getStyle("A$nr")->applyFromArray($value['format']);
      }
    }
    else {
      $objSheet->SetCellValue($addr, $value);
    }
  }

  // Apply formats:
  // Set variables.
  $rowStart = $params->options['start_at_row'];
  $rowDataStart = $rowStart + 1;
  $rowTotals = $rowNr + 1;
  reset($params->fields);
  $ltrStart = current($params->fields);
  $ltrEnd = end($params->fields);

  // Header format:
  if ($params->options['format']['header']) {
    $format = FALSE;
    eval ($params->options['format']['header']);
    if ($format) {
      $addr = $ltrStart . $rowStart . ':' . $ltrEnd . $rowStart;
      $objSheet->getStyle($addr)->applyFromArray($format);
    }
  }

  // Body format:
  if ($params->options['format']['body']) {
    $format = FALSE;
    eval ($params->options['format']['body']);
    if ($format) {
      $addr = $ltrStart . $rowStart . ':' . $ltrEnd . $rowNr;
      $objSheet->getStyle($addr)->applyFromArray($format);
    }
  }

  // Totals format:
  $format_totals = FALSE;
  if ($params->options['format']['totals']) {
    $format = FALSE;
    eval ($params->options['format']['totals']);
    $format_totals = $format;
  }

  // Set up each column.
  foreach ($params->fields as $fieldK => $ltr) {
    $df = $params->options['views_phpexcel_fields'][$fieldK];
    $objSheet->getColumnDimension($ltr)->setWidth($df['width'] ? $df['width'] : 30);

    // Apply column format if is set.
    if ($df['format']) {
      $format = FALSE;
      eval ($df['format']);
      $plus = $df['total'] != 'none' ? 1 : 0;
      if ($format) {
        $addr = $ltr . $rowDataStart . ':' . $ltr . ($rowNr + $plus);
        $objSheet->getStyle($addr)->applyFromArray($format);
      }
    }

    // Calculate totals:
    switch ($df['total']) {
      case 'sum':
      case 'average':
        $addr = $ltr . ($rowNr +1);
        $val = '=' . strtoupper($df['total']) . '(' . $ltr . $rowDataStart . ':' . $ltr . $rowNr . ')';
        $objSheet->setCellValue($addr, $val);
        if ($format_totals) $objSheet->getStyle($addr)->applyFromArray($format_totals);
        break;
      default:
        break;
    }
  }

  switch($params->type){
    case 'xls':
      $writerType='Excel5';
      require_once 'sites/all/libraries/PHPExcel/Classes/PHPExcel/Writer/Excel5.php';
      break;
    case 'xlsx':
      $writerType='Excel2007';
      require_once 'sites/all/libraries/PHPExcel/Classes/PHPExcel/Writer/Excel2007.php';
      break;
    case 'pdf':
      $writerType='PDF';
      require_once 'sites/all/libraries/PHPExcel/Classes/PHPExcel/Writer/PDF.php';
      break;
    default:
      drupal_set_message(t("Unknown file type @ext", array('@ext'=>$ext)), 'error');
      return;
  }

  global $user;
  $file_name = $params->options['file_name'];
  if (!$file_name) $file_name = "Date(Ymd)_[view]_[display]_[uid]";
  $file_name = str_replace(
    array(
      '[view]',
      '[display]',
      '[uid]',
    ),
    array(
      $params->view,
      $params->display,
      $user->uid,
    ),
    $file_name
  );

  $re = "/Date\((.*?)\)/";
  if (preg_match($re, $file_name, $mt)) {
    $file_name = preg_replace($re, date($mt[1]), $file_name);
  }

  foreach ($params->path_parts as $k => $val) $file_name = str_replace('%' . $k, $val, $file_name);
  if($view->args) {
    foreach ($view->args as $k => $val) $file_name = str_replace('!' . $k, $val, $file_name);
  }


  $file_directory = 'phpexcel/' . $user->uid . '/' . $params->view . '/' . $params->display;

  //initiate the writer
  $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, $writerType);

  //make complete file name
  $file_base_name=$file_name.'.'.$params->type;

  //make and prepare directory to write the file to
  $directory = file_default_scheme() . '://' . $file_directory ;
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  $file_name=drupal_realpath($directory).'/'.$file_base_name;

  if($writerType=='PDF') $objWriter->writeAllSheets();

  //write the file
  $objWriter->save($file_name);

  //make URL path to the file and redirect it
  $file_path=file_create_url(file_build_uri($file_directory . '/' . $file_base_name));
  return $file_path;

}
